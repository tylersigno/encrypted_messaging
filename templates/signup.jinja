<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script>
         function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // this function is identical to login(), see login.jinja
        async function signup() {
            let loginURL = "{{ url_for('signup_user') }}";
            let username = $("#username").val();
            let password = $("#password").val();

            const encoder = new TextEncoder()
            const passwordBuffer = encoder.encode(password)
            const hashBuffer = await crypto.subtle.digest('SHA-256', passwordBuffer)
            const hashedpassword = Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, '0')).join('')

            let res = await axios.post(loginURL, {
                username: username,
                hashedpassword: hashedpassword
            });
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            await deriveAndStoreKey(password, username)

            window.open(res.data, "_self")
        }

        async function deriveAndStoreKey(password, username) {
            const encoder = new TextEncoder();
            const salt = encoder.encode(username); 
            const keyMaterial = await window.crypto.subtle.importKey(
                "raw",
                encoder.encode(password),
                {name: "PBKDF2"},
                false,
                ["deriveBits", "deriveKey"]
            );
            const key = await window.crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: salt,
                    iterations: 100000,
                    hash: "SHA-256"
                },
                keyMaterial,
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"]
            );
            const rawKey = await window.crypto.subtle.exportKey("raw", key);
            console.log("Key created")
            sessionStorage.setItem('encryptionKey', JSON.stringify(Array.from(new Uint8Array(rawKey))));
            alert('Key derived and stored successfully.');
        }

    </script>
{% endblock %}
